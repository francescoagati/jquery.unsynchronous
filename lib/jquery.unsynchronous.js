/* Generated by Continuation.js v0.0.5 */
(function () {
  var slice$, result;
  slice$ = [].slice;
  window.async = function () {
    var delay, sum, amap, afilter;
    delay = function (fn) {
      var i$, args, callback, wrapper;
      args = 1 < (i$ = arguments.length - 1) ? slice$.call(arguments, 1, i$) : (i$ = 1, []), callback = arguments[i$];
      wrapper = function () {
        return callback(fn.apply(null, args));
      };
      return setTimeout(wrapper, 100);
    };
    sum = function (a, b) {
      return a + b;
    };
    amap = function (list, fn, callback) {
      var new_list, i$, len$, el, result;
      new_list = [];
      i$ = 0, len$ = list.length;
      function loop_0(loop_0_cont) {
        if (i$ < len$) {
          el = list[i$];
          delay(fn, el, function () {
            result = arguments[0];
            new_list.push(result);
            ++i$;
            loop_0(loop_0_cont);
          });
        } else {
          loop_0_cont();
        }
      }
      loop_0(function () {
        return callback(new_list);
      });
    };
    afilter = function (list, fn, callback) {
      var new_list, i$, len$, el, result;
      new_list = [];
      i$ = 0, len$ = list.length;
      function loop_1(loop_1_cont) {
        if (i$ < len$) {
          el = list[i$];
          delay(fn, el, function () {
            result = arguments[0];
            if (result) {
              new_list.push(el);
            }
            ++i$;
            loop_1(loop_1_cont);
          });
        } else {
          loop_1_cont();
        }
      }
      loop_1(function () {
        return callback(new_list);
      });
    };
    return {
      amap: amap,
      afilter: afilter
    };
  }();
  async.amap([
    1,
    2,
    3,
    4,
    5
  ], function (it) {
    return it + 10;
  }, function () {
    result = arguments[0];
    console.log(result);
    async.afilter(result, function (it) {
      return it > 12;
    }, function () {
      result = arguments[0];
      console.log(result);
    });
  });
}.call(this));