/* Generated by Continuation.js v0.0.5 */
(function () {
  var slice$;
  slice$ = [].slice;
  (function () {
    var delay, amap, afilter;
    delay = function (fn) {
      var i$, args, callback, wrapper;
      args = 1 < (i$ = arguments.length - 1) ? slice$.call(arguments, 1, i$) : (i$ = 1, []), callback = arguments[i$];
      wrapper = function () {
        return callback(fn.apply(null, args));
      };
      return setTimeout(wrapper);
    };
    amap = function (list, iterator, callback) {
      var new_list, i$, len$, el, result;
      new_list = [];
      i$ = 0, len$ = list.length;
      function loop_0(loop_0_cont) {
        if (i$ < len$) {
          el = list[i$];
          delay(iterator, el, function () {
            result = arguments[0];
            new_list.push(result);
            ++i$;
            loop_0(loop_0_cont);
          });
        } else {
          loop_0_cont();
        }
      }
      loop_0(function () {
        return callback(new_list);
      });
    };
    afilter = function (list, iterator, callback) {
      var new_list, i$, len$, el, result;
      new_list = [];
      i$ = 0, len$ = list.length;
      function loop_1(loop_1_cont) {
        if (i$ < len$) {
          el = list[i$];
          delay(iterator, el, function () {
            result = arguments[0];
            if (result) {
              new_list.push(el);
            }
            ++i$;
            loop_1(loop_1_cont);
          });
        } else {
          loop_1_cont();
        }
      }
      loop_1(function () {
        return callback(new_list);
      });
    };
    return jQuery.fn.unsynchronous = {
      delay: delay,
      amap: amap,
      afilter: afilter
    };
  }());
}.call(this));